@page "/ProductsByCategory/{CategoryId:int}"

@if (ProductDto == null && ErrorMessage == null)
{
    <Loading/>
}
else if (ErrorMessage != null)
{
    <ShowError ErrorMessage="@ErrorMessage"></ShowError>
}
else
{
    <h3>Produtos (@CategoryName)</h3>
    @if (ProductDto.Count() > 0)
    {
        <div class="row mt-3">
            <ShowProduct Products="@ProductDto"></ShowProduct>
        </div>
    }
}


@code {
    [Inject]
    public IManageProductsLocalStorageService ManageProductsLocalStorageService { get; set; }
    
    [Inject]
    public IManageShoppingCartItemsLocalStorageService ManageShoppingCartItemsLocalStorageService { get; set; }
    
    [Inject]
    public IProductService ProductService { get; set; }

    [Parameter]
    public int CategoryId { get; set; }

    public IEnumerable<ProductDto>? ProductDto { get; set; }
    public string? CategoryName { get; set; }
    public string ? ErrorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //ProductDto = await ProductService.GetItemsByCategory(CategoryId);
            ProductDto = await GetCollectionProductByCategoryId(CategoryId);

            if (ProductDto != null && ProductDto.Count() > 0)
            {
                var productDto = ProductDto.FirstOrDefault(p => p.CategoryId == CategoryId);
                if (productDto != null)
                {
                    CategoryName = productDto.CategoryName;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task<IEnumerable<ProductDto>> GetCollectionProductByCategoryId(int categoryId)
    {
        var productCollection = await ManageProductsLocalStorageService.GetCollection();

        if (productCollection != null)
        {
            return productCollection.Where(p => p.CategoryId == categoryId);
        }
        else
        {
            return await ProductService.GetItemsByCategory(categoryId);
        }
    }
}