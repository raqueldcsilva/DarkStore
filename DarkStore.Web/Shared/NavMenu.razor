@implements IDisposable
@inject IShoppingCartService ShoppingCartService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">DarkStore.Web</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @* <div class="nav-item px-3"> *@
        @*     <NavLink class="nav-link" href="produtos"> *@
        @*         <span class="oi oi-basket" aria-hidden="true"></span> Produtos *@
        @*     </NavLink> *@
        @* </div> *@
        <ProductsByCategoryNavMenu></ProductsByCategoryNavMenu>
        <div class="nav-item px-3 d-sm-none">
            <NavLink class="nav-link" href="buy">
                <span class="oi oi-cart" aria-hidden="true"></span>&nbsp; Carrinho(<b>@ShoppingCartItemCount</b>)
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private int ShoppingCartItemCount = 0;


    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    
    protected override void OnInitialized()
    {
        ShoppingCartService.OnShoppingCartChanged += ShoppingCartChanged;
    }

    protected void ShoppingCartChanged(int totalQuantity)
    {
        ShoppingCartItemCount = totalQuantity;
        StateHasChanged();
    }

    public void Dispose()
    {
        ShoppingCartService.OnShoppingCartChanged -= ShoppingCartChanged;
    }

}